{"ast":null,"code":"import { combineReducers } from 'redux';\n\n// Define your reducers\nconst initialState = {\n  // Initial state for your application\n};\nfunction reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    // Handle different action types and modify the state accordingly\n    default:\n      return state;\n  }\n}\n\n// Combine reducers if you have multiple reducers\nconst rootReducer = combineReducers({\n  // Add your reducers here\n  myReducer: reducer\n});\nexport default rootReducer;","map":{"version":3,"names":["combineReducers","initialState","reducer","state","arguments","length","undefined","action","type","rootReducer","myReducer"],"sources":["/Users/giovannifernando/Desktop/kpn2/customer-management/src/reducers.js"],"sourcesContent":["import { combineReducers } from 'redux';\n\n// Define your reducers\nconst initialState = {\n  // Initial state for your application\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    // Handle different action types and modify the state accordingly\n    default:\n      return state;\n  }\n}\n\n// Combine reducers if you have multiple reducers\nconst rootReducer = combineReducers({\n  // Add your reducers here\n  myReducer: reducer,\n});\n\nexport default rootReducer;\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,OAAO;;AAEvC;AACA,MAAMC,YAAY,GAAG;EACnB;AAAA,CACD;AAED,SAASC,OAAOA,CAAA,EAA+B;EAAA,IAA9BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGH,YAAY;EAAA,IAAEM,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC3C,QAAQC,MAAM,CAACC,IAAI;IACjB;IACA;MACE,OAAOL,KAAK;EAChB;AACF;;AAEA;AACA,MAAMM,WAAW,GAAGT,eAAe,CAAC;EAClC;EACAU,SAAS,EAAER;AACb,CAAC,CAAC;AAEF,eAAeO,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}